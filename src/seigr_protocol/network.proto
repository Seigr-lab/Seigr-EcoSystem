syntax = "proto3";

package seigr;

import "common.proto";  // Import for QoSLevel, NetworkOperationLog, NetworkStatusRequest, etc.

// Enum for defining network protocol types used in Seigr
enum NetworkProtocol {
    PROTOCOL_UNDEFINED = 0;
    PROTOCOL_TCP = 1;                 // TCP protocol
    PROTOCOL_UDP = 2;                 // UDP protocol
    PROTOCOL_IPFS = 3;                // IPFS-based communication
    PROTOCOL_HYPHEN = 4;              // Custom Seigr Hyphen protocol
    PROTOCOL_HTTP = 5;                // HTTP/HTTPS protocol
    PROTOCOL_P2P = 6;                 // Peer-to-peer protocol
}

// Enum for representing the current status of a network hyphen
enum HyphenStatus {
    HYPHEN_STATUS_UNDEFINED = 0;
    HYPHEN_ONLINE = 1;                // Hyphen is online and reachable
    HYPHEN_OFFLINE = 2;               // Hyphen is offline
    HYPHEN_MAINTENANCE = 3;           // Hyphen is under maintenance
    HYPHEN_DEGRADED = 4;              // Hyphen is online but experiencing issues
    HYPHEN_UNREACHABLE = 5;           // Hyphen is unreachable due to network issues
}

// Message for representing a network hyphen in the Seigr system
message NetworkHyphen {
    string hyphen_id = 1;                     // Unique identifier for the network hyphen
    string ip_address = 2;                    // IP address of the hyphen
    int32 port = 3;                           // Port number for communication
    NetworkProtocol primary_protocol = 4;     // Primary protocol used by this hyphen
    HyphenStatus status = 5;                  // Operational status of the hyphen
    repeated NetworkProtocol supported_protocols = 6; // List of protocols supported by the hyphen
    map<string, string> metadata = 7;         // Metadata for additional hyphen information (e.g., region)
    string last_seen = 8;                     // Timestamp of the last successful interaction with the hyphen
    int32 load_percentage = 9;                // Real-time load percentage for resource monitoring
    int32 avg_latency_ms = 10;                // Average latency in milliseconds
}

// Message for tracking peer connections between hyphens
message PeerConnection {
    string connection_id = 1;                 // Unique identifier for the connection
    string source_hyphen_id = 2;              // ID of the source hyphen
    string target_hyphen_id = 3;              // ID of the target hyphen
    NetworkProtocol protocol = 4;             // Protocol used for the connection
    int32 latency_ms = 5;                     // Latency in milliseconds
    QoSLevel qos_level = 6;                   // QoS level for the connection
    string status = 7;                        // Status of the connection (e.g., "active", "closed")
    string created_at = 8;                    // Timestamp of when the connection was established
    string last_updated = 9;                  // Timestamp of the last update to the connection status
    map<string, string> metadata = 10;        // Additional metadata for the connection
    int64 data_transferred_bytes = 11;        // Data transferred through this connection
}

// Message for managing a cluster of network hyphens, including health status
message NetworkCluster {
    string cluster_id = 1;                    // Unique identifier for the network cluster
    repeated NetworkHyphen hyphens = 2;       // List of hyphens within the cluster
    map<string, int32> hyphen_status_counts = 3; // Counts of hyphens by status (e.g., online, offline)
    QoSLevel default_qos_level = 4;           // Default QoS level for traffic within the cluster
    string last_health_check = 5;             // Timestamp of the last health check
    string health_status = 6;                 // Overall health status of the cluster (e.g., "healthy")
    map<string, string> cluster_metadata = 7; // Additional metadata for cluster context
    NetworkHealthSummary health_summary = 8;  // Summary of cluster health status from common.proto
}

// Message to define connectivity configurations for network operations
message NetworkConfig {
    int32 max_connections = 1;                // Maximum allowed simultaneous connections
    int32 retry_limit = 2;                    // Retry limit for failed connection attempts
    int32 timeout_seconds = 3;                // Timeout duration for network requests
    bool enable_encryption = 4;               // Flag to enable encryption for connections
    QoSLevel default_qos = 5;                 // Default QoS level for all connections
    repeated NetworkProtocol allowed_protocols = 6; // List of protocols allowed for use
    map<string, string> config_metadata = 7;  // Additional metadata for network configuration
    int32 max_packet_loss_threshold = 8;      // Max allowable packet loss before action
}

// Message for tracking real-time network statistics and monitoring
message NetworkStatistics {
    string cluster_id = 1;                    // ID of the cluster being monitored
    int32 total_hyphens = 2;                  // Total number of hyphens in the cluster
    int32 active_connections = 3;             // Number of active connections across hyphens
    int32 total_data_transferred_mb = 4;      // Total data transferred within the cluster, in MB
    map<string, double> latency_averages = 5; // Average latency for each protocol as a map
    map<string, int32> qos_distribution = 6;  // Distribution of QoS levels across connections
    string last_updated = 7;                  // Timestamp of the last update to network statistics
    NetworkPerformanceSummary performance_summary = 8; // Summary of network performance metrics
}

// Message for managing network security policies and access control
message NetworkSecurityPolicy {
    string policy_id = 1;                     // Unique identifier for the security policy
    repeated string allowed_ip_ranges = 2;    // List of allowed IP ranges for connection
    repeated string blocked_ip_ranges = 3;    // List of blocked IP ranges
    bool enforce_strict_tls = 4;              // Enforce TLS encryption on all connections
    repeated string allowed_protocols = 5;    // List of network protocols allowed by this policy
    bool adaptive_blacklisting = 6;           // Enable adaptive blacklisting based on threats
    map<string, string> policy_metadata = 7;  // Metadata for additional policy details
}

// Message for handling network errors, with metadata for troubleshooting
message NetworkErrorEvent {
    string error_id = 1;                      // Unique identifier for the error event
    string source_hyphen_id = 2;              // ID of the hyphen where the error originated
    string target_hyphen_id = 3;              // ID of the hyphen affected by the error (if any)
    NetworkProtocol protocol = 4;             // Protocol related to the error
    string error_code = 5;                    // Code categorizing the error (e.g., "TIMEOUT", "UNREACHABLE")
    string error_message = 6;                 // Detailed description of the error
    string timestamp = 7;                     // Timestamp of when the error occurred
    map<string, string> metadata = 8;         // Additional metadata for troubleshooting context
    bool auto_resolved = 9;                   // Indicates if the error was automatically resolved
    int32 retry_attempts = 10;                // Number of retry attempts for the error
    string escalation_strategy = 11;          // Defined strategy for escalations based on error type
}
