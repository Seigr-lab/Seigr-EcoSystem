syntax = "proto3";

package seigr;

import "common.proto";  // Import for QoSLevel, NetworkOperationLog, etc.

// Enum for defining network protocol types used in Seigr, with adaptive layers
enum NetworkProtocol {
    PROTOCOL_UNDEFINED = 0;
    PROTOCOL_TCP = 1;                          // TCP protocol
    PROTOCOL_UDP = 2;                          // UDP protocol
    PROTOCOL_IPFS = 3;                         // IPFS-based communication
    PROTOCOL_HYPHEN = 4;                       // Custom Seigr Hyphen protocol
    PROTOCOL_HTTP = 5;                         // HTTP/HTTPS protocol
    PROTOCOL_P2P = 6;                          // Peer-to-peer protocol
    PROTOCOL_ADAPTIVE_LAYERED = 7;             // Layered protocol with dynamic adjustments
    PROTOCOL_SENARY_COMPRESSION = 8;           // Custom protocol using senary-based compression
}

// Enum for representing the current status of a network hyphen with extended states
enum HyphenStatus {
    HYPHEN_STATUS_UNDEFINED = 0;
    HYPHEN_ONLINE = 1;                         // Hyphen is online and reachable
    HYPHEN_OFFLINE = 2;                        // Hyphen is offline
    HYPHEN_MAINTENANCE = 3;                    // Hyphen is under maintenance
    HYPHEN_DEGRADED = 4;                       // Online but experiencing performance issues
    HYPHEN_UNREACHABLE = 5;                    // Hyphen is unreachable due to network issues
    HYPHEN_ADAPTIVE_SCALE_DOWN = 6;            // Scaled down in response to low network demand
    HYPHEN_ADAPTIVE_SCALE_UP = 7;              // Scaled up due to high network load
}

// Message for representing a network hyphen in the Seigr system
message NetworkHyphen {
    string hyphen_id = 1;                       // Unique identifier for the hyphen
    string ip_address = 2;                      // IP address of the hyphen
    int32 port = 3;                             // Port number for communication
    NetworkProtocol primary_protocol = 4;       // Primary protocol used by this hyphen
    HyphenStatus status = 5;                    // Operational status of the hyphen
    repeated NetworkProtocol supported_protocols = 6; // Supported protocols list
    map<string, string> metadata = 7;           // Metadata (e.g., region, data center)
    string last_seen = 8;                       // Timestamp of last successful interaction
    int32 load_percentage = 9;                  // Real-time load percentage
    int32 avg_latency_ms = 10;                  // Average latency in milliseconds
    int32 available_bandwidth_mbps = 11;        // Available bandwidth in Mbps
    string adaptive_scaling_status = 12;        // Status of adaptive scaling actions
}

// Message for managing peer connections between hyphens with adaptive metrics
message PeerConnection {
    string connection_id = 1;                   // Unique connection ID
    string source_hyphen_id = 2;                // Source hyphen ID
    string target_hyphen_id = 3;                // Target hyphen ID
    NetworkProtocol protocol = 4;               // Protocol used
    int32 latency_ms = 5;                       // Latency in milliseconds
    QoSLevel qos_level = 6;                     // QoS level for the connection
    string status = 7;                          // Connection status (e.g., "active")
    string created_at = 8;                      // Timestamp when the connection was created
    string last_updated = 9;                    // Timestamp of last status update
    map<string, string> metadata = 10;          // Metadata for additional connection info
    int64 data_transferred_bytes = 11;          // Data transferred in bytes
    bool auto_scaled_qos = 12;                  // Indicates if QoS was dynamically scaled
    float congestion_level = 13;                // Network congestion factor for this connection
}

// Message for managing a cluster of hyphens, with real-time health management
message NetworkCluster {
    string cluster_id = 1;                      // Unique ID for the cluster
    repeated NetworkHyphen hyphens = 2;         // List of hyphens in the cluster
    map<string, int32> hyphen_status_counts = 3; // Hyphen counts by status
    QoSLevel default_qos_level = 4;             // Default QoS level within cluster
    string last_health_check = 5;               // Timestamp of last health check
    string health_status = 6;                   // Overall health status (e.g., "healthy")
    map<string, string> cluster_metadata = 7;   // Additional metadata for cluster
    NetworkHealthSummary health_summary = 8;    // Health summary from common.proto
    float load_balancing_factor = 9;            // Load balancing metric for internal traffic
}

// Message to define connectivity configurations with adaptive settings
message NetworkConfig {
    int32 max_connections = 1;                  // Max allowed connections
    int32 retry_limit = 2;                      // Retry limit for failed attempts
    int32 timeout_seconds = 3;                  // Timeout duration in seconds
    bool enable_encryption = 4;                 // Flag to enable encryption
    QoSLevel default_qos = 5;                   // Default QoS level for connections
    repeated NetworkProtocol allowed_protocols = 6; // Allowed protocols list
    map<string, string> config_metadata = 7;    // Metadata for configuration
    int32 max_packet_loss_threshold = 8;        // Max packet loss threshold
    bool enable_dynamic_qos_scaling = 9;        // Enables adaptive QoS based on network load
    string fallback_protocol = 10;              // Protocol to use in case of primary failure
}

// Message for tracking network statistics and adaptive performance metrics
message NetworkStatistics {
    string cluster_id = 1;                      // Cluster ID being monitored
    int32 total_hyphens = 2;                    // Total hyphens in the cluster
    int32 active_connections = 3;               // Number of active connections
    int32 total_data_transferred_mb = 4;        // Total data transferred, in MB
    map<string, double> latency_averages = 5;   // Average latency per protocol
    map<string, int32> qos_distribution = 6;    // QoS levels distribution across connections
    string last_updated = 7;                    // Last statistics update timestamp
    NetworkPerformanceSummary performance_summary = 8; // Summary of performance metrics
    float avg_congestion_level = 9;             // Average congestion level in the network
}

// Message for advanced network security policies with adaptive threat handling
message NetworkSecurityPolicy {
    string policy_id = 1;                       // Unique security policy ID
    repeated string allowed_ip_ranges = 2;      // Allowed IP ranges
    repeated string blocked_ip_ranges = 3;      // Blocked IP ranges
    bool enforce_strict_tls = 4;                // Enforce TLS encryption
    repeated NetworkProtocol allowed_protocols = 5; // Allowed protocols
    bool adaptive_blacklisting = 6;             // Enable adaptive blacklisting based on threats
    map<string, string> policy_metadata = 7;    // Metadata for policy details
    string auto_response_action = 8;            // Automatic response action to detected threats
    bool enable_intrusion_detection = 9;        // Flag to enable AI-driven intrusion detection
    string security_update_schedule = 10;       // Schedule for policy updates
}

// Message for handling network errors, with detailed escalation strategies
message NetworkErrorEvent {
    string error_id = 1;                        // Unique error ID
    string source_hyphen_id = 2;                // Source hyphen ID
    string target_hyphen_id = 3;                // Target hyphen ID (if any)
    NetworkProtocol protocol = 4;               // Protocol related to the error
    string error_code = 5;                      // Categorized error code
    string error_message = 6;                   // Description of the error
    string timestamp = 7;                       // Error occurrence timestamp
    map<string, string> metadata = 8;           // Metadata for troubleshooting
    bool auto_resolved = 9;                     // Indicates if error was auto-resolved
    int32 retry_attempts = 10;                  // Retry attempts for resolution
    string escalation_strategy = 11;            // Escalation strategy based on error type
    string recommended_followup_action = 12;    // Suggested follow-up if error recurs
    string alert_recipients = 13;               // Contacts to alert in case of critical errors
}
