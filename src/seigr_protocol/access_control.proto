syntax = "proto3";

package seigr;

// Enum defining user roles with unique prefix for clarity and hierarchy
enum RoleType {
    ROLE_TYPE_UNDEFINED = 0;
    ROLE_TYPE_ADMIN = 1;
    ROLE_TYPE_EDITOR = 2;
    ROLE_TYPE_VIEWER = 3;
    ROLE_TYPE_CONTRIBUTOR = 4;
    ROLE_TYPE_AUDITOR = 5;          // Audit-only access
    ROLE_TYPE_DELEGATOR = 6;        // Can delegate permissions
}

// Enum specifying permissions with unique prefix
enum PermissionType {
    PERMISSION_TYPE_UNDEFINED = 0;
    PERMISSION_TYPE_READ = 1;
    PERMISSION_TYPE_WRITE = 2;
    PERMISSION_TYPE_EXECUTE = 3;
    PERMISSION_TYPE_DELETE = 4;
    PERMISSION_TYPE_SHARE = 5;
    PERMISSION_TYPE_MANAGE = 6;       // Manage permissions within the ACL
    PERMISSION_TYPE_DELEGATE = 7;     // Permission to delegate access
    PERMISSION_TYPE_AUDIT = 8;        // Permission to view audit logs
}

// Enum specifying types of access
enum AccessType {
    ACCESS_TYPE_UNDEFINED = 0;
    ACCESS_TYPE_READ = 1;
    ACCESS_TYPE_WRITE = 2;
    ACCESS_TYPE_EXECUTE = 3;
    ACCESS_TYPE_DELETE = 4;
    ACCESS_TYPE_SHARE = 5;
    ACCESS_TYPE_ADMINISTRATE = 6;     // Administrative actions
    ACCESS_TYPE_DELEGATE = 7;         // Delegating access rights
}

// Enum for policy status within the access system
enum PolicyStatus {
    POLICY_STATUS_UNDEFINED = 0;
    POLICY_STATUS_ACTIVE = 1;
    POLICY_STATUS_INACTIVE = 2;
    POLICY_STATUS_EXPIRED = 3;
    POLICY_STATUS_REVOKED = 4;
    POLICY_STATUS_PENDING_REVIEW = 5;     // Policies under review
    POLICY_STATUS_SCHEDULED_REVIEW = 6;   // Scheduled for periodic review
}

// Represents a detailed role with permissions and constraints
message Role {
    string role_id = 1;                           // Unique ID for the role
    string name = 2;                              // Descriptive role name
    repeated PermissionType permissions = 3;      // Permissions granted to this role
    map<string, string> constraints = 4;          // Constraints (e.g., time, location)
    bool can_delegate = 5;                        // Indicates if role can delegate permissions
    int32 inheritance_depth = 6;                  // Depth of inherited permissions
}

// Permissions assigned to users or groups within a policy
message Permission {
    string entity_id = 1;                         // ID of the user or group
    RoleType role = 2;                            // Role type for this permission
    repeated PermissionType actions = 3;          // Allowed actions
    string constraints = 4;                       // Constraints (e.g., time/location-based)
    string expiry = 5;                            // Expiration date for temporary permissions
    bool requires_mfa = 6;                        // Indicates if MFA is required
    map<string, string> metadata = 7;             // Metadata for custom attributes
    bool conditional_access = 8;                  // Flag for conditional access
}

// Defines a single access control entry for a user or entity
message AccessControlEntry {
    string user_id = 1;                          // ID of the user/entity
    RoleType role = 2;                           // Assigned role
    repeated PermissionType permissions = 3;     // List of granted permissions
    repeated string allowed_actions = 4;         // Specific allowed actions (e.g., "ROLLBACK")
    bool is_inherited = 5;                       // Indicates if permissions are inherited
    string effective_from = 6;                   // Start date for permissions
    string expires_on = 7;                       // Expiration date for time-limited permissions
    bool mfa_required = 8;                       // Indicates if MFA is required for this entry
}

// Access control list holding multiple entries for various users/entities
message AccessControlList {
    repeated AccessControlEntry entries = 1;     // Access control entries
    string version = 2;                          // ACL format version
    map<string, string> metadata = 3;            // Metadata for additional context or versioning
    string policy_id = 4;                        // ID of governing access policy
    PolicyStatus status = 5;                     // Status of the ACL (active, expired, etc.)
    string last_reviewed = 6;                    // Timestamp of the last review
    string next_review_due = 7;                  // Scheduled date for the next review
}

// Main access policy structure
message AccessPolicy {
    string policy_id = 1;                        // Unique policy ID
    string policy_name = 2;                      // Human-readable name
    PolicyStatus status = 3;                     // Policy status
    string creation_timestamp = 4;               // Creation timestamp
    string updated_timestamp = 5;                // Last updated timestamp
    repeated Permission permissions = 6;         // Permissions within the policy
    string enforced_on = 7;                      // Date policy is enforced
    map<string, string> metadata = 8;            // Additional metadata for custom attributes
    repeated string applicable_roles = 9;        // Roles governed by this policy
}

// Context for tracking access history and usage
message AccessContext {
    int32 access_count = 1;                      // Access frequency
    string last_accessed = 2;                    // Last access timestamp
    repeated string hyphen_access_history = 3;   // Log of access entities
    string last_modified = 4;                    // Last modification timestamp
    AccessType access_type = 5;                  // Type of access
    map<string, string> metadata = 6;            // Metadata for context
    string originating_ip = 7;                   // IP address of last access
    string device_id = 8;                        // Device identifier
    bool unusual_activity_flagged = 9;           // Flag for detecting unusual activity
}

// Detailed log for access events, with audit details
message AccessAuditLog {
    string user_id = 1;                          // User performing the action
    AccessType action = 2;                       // Access type (e.g., READ, WRITE)
    string timestamp = 3;                        // Timestamp of the event
    string status = 4;                           // Status of the access (e.g., SUCCESS, FAILURE)
    string details = 5;                          // Additional context or error message
    map<string, string> metadata = 6;            // Metadata for extensibility
    string ip_address = 7;                       // IP address for security tracking
    string device_info = 8;                      // Device details
    bool mfa_verified = 9;                       // Indicates if MFA was used in the action
    bool delegated_access = 10;                  // Indicates if access was via delegated rights
    string origin_role = 11;                     // Role from which access was granted
}
