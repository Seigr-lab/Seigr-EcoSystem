syntax = "proto3";

package seigr;

// Enum for specifying allowed actions a script can perform
enum AllowedAction {
    ACTION_UNDEFINED = 0;
    READ = 1;                                 // Read data or files
    WRITE = 2;                                // Write data or files
    EXECUTE = 3;                              // Execute code or commands
    DELETE = 4;                               // Delete files or data
    NETWORK_ACCESS = 5;                       // Access the network
}

// Enum for error handling strategies
enum ErrorHandlingStrategy {
    ERROR_STRATEGY_UNDEFINED = 0;             // Prefixed to avoid conflicts
    ERROR_STRATEGY_RETRY = 1;                 // Retry on error
    ERROR_STRATEGY_LOG_ONLY = 2;              // Log the error but continue execution
    ERROR_STRATEGY_TERMINATE = 3;             // Terminate script on error
    ERROR_STRATEGY_FALLBACK = 4;              // Use fallback logic or script
}

// Message representing a script, with constraints and sandboxing options
message Script {
    string script_id = 1;                     // Unique identifier for the script
    string language = 2;                      // Language used (e.g., "JavaScript", "Python", "WASM")
    bytes code = 3;                           // Binary or text code for the script
    map<string, string> environment = 4;      // Environment variables or settings for script execution
    bool is_sandboxed = 5;                    // Indicates if the script runs in a sandboxed environment

    string version = 6;                       // Version of the script for compatibility
    bytes code_hash = 7;                      // Hash of the code for integrity verification

    int32 max_runtime = 8;                    // Maximum allowed runtime in milliseconds
    int32 max_memory = 9;                     // Maximum memory usage in megabytes
    int32 max_cpu_usage = 10;                 // Maximum CPU usage percentage

    repeated AllowedAction allowed_actions = 11; // Specific actions this script can perform
    repeated string dependencies = 12;        // List of dependencies or libraries needed

    ErrorHandlingStrategy error_handling = 13; // Strategy for handling script errors
    string log_level = 14;                    // Logging level for script execution (e.g., "INFO", "DEBUG")

    map<string, string> metadata = 15;        // Metadata for additional script information
    bool enable_tracing = 16;                 // Enable tracing for debugging and performance analysis
}

// Message to represent a script execution request
message ScriptExecutionRequest {
    string request_id = 1;                    // Unique identifier for the execution request
    string script_id = 2;                     // ID of the script to be executed
    map<string, string> input_parameters = 3; // Input parameters for the script
    string initiated_by = 4;                  // ID of the user or system initiating the execution
    string requested_at = 5;                  // Timestamp of the execution request
    bool async_execution = 6;                 // Flag to indicate if the execution is asynchronous
}

// Message to represent the result of a script execution
message ScriptExecutionResult {
    string request_id = 1;                    // Unique identifier matching the execution request
    string script_id = 2;                     // ID of the executed script
    bool success = 3;                         // Indicates if the execution was successful
    string result_data = 4;                   // Output data or result of the script execution
    string error_message = 5;                 // Error message if execution failed
    string completed_at = 6;                  // Timestamp when execution was completed
    map<string, string> execution_metadata = 7; // Additional metadata for the execution result
}

// Message for managing dependencies, supporting remote and local sources
message DependencyManager {
    repeated string local_dependencies = 1;   // List of local dependencies required
    repeated string remote_dependencies = 2;  // List of remote dependencies (URLs or package names)
    map<string, string> dependency_metadata = 3; // Metadata for dependency configuration
    string dependency_checksum = 4;           // Checksum to validate dependencies
}
