syntax = "proto3";

package seigr;

import "mycelith_voting.proto"; // For voting layers and choices in approval processes

// Message representing a treasury pool in the Seigr system
message TreasuryPool {
  string pool_id = 1;                              // Unique identifier for the treasury pool
  string purpose = 2;                              // Purpose of the pool (e.g., "Development Fund")
  uint64 balance = 3;                              // Current balance of the treasury pool in tokens
  DistributionPolicy distribution_policy = 4;      // Policy governing fund distribution in the pool
  string created_at = 5;                           // Timestamp of when the pool was created
  map<string, string> metadata = 6;                // Additional metadata (e.g., regulatory details)
  uint64 allocated_funds = 7;                      // Total funds allocated from this pool so far
  uint64 reserved_funds = 8;                       // Funds reserved for approved but pending requests
}

// Enum defining policies for distributing funds within the treasury pool
enum DistributionPolicy {
  DISTRIBUTION_POLICY_FIXED_ALLOCATION = 0;        // Fixed allocation per request
  DISTRIBUTION_POLICY_PERCENTAGE_BASED = 1;        // Distribution as a percentage of pool balance
  DISTRIBUTION_POLICY_VOTING_DETERMINED = 2;       // Allocation determined by Mycelith voting process
}

// Message for submitting a request to the treasury for funding
message FundingRequest {
  string request_id = 1;                           // Unique identifier for the funding request
  string purpose = 2;                              // Purpose or justification for the funding request
  uint64 requested_amount = 3;                     // Amount requested in tokens
  FundingStatus funding_status = 4;                // Current status of the funding request
  repeated VotingLayer voting_layers = 5;          // Voting layers for approval, using Mycelith voting
  string requester_id = 6;                         // ID of the entity requesting funds
  string timestamp = 7;                            // Timestamp when the funding request was made
  string last_updated = 8;                         // Timestamp when the status was last updated
  map<string, string> metadata = 9;                // Additional metadata (e.g., department, project)
  uint64 approved_amount = 10;                     // Amount approved if partially funded
  string approval_timestamp = 11;                  // Timestamp of final approval if applicable
}

// Enum to indicate the approval status of a funding request, with unique namespacing
enum FundingStatus {
  FUNDING_STATUS_PENDING = 0;                      // Awaiting review or approval
  FUNDING_STATUS_APPROVED = 1;                     // Request fully approved
  FUNDING_STATUS_DENIED = 2;                       // Request denied
  FUNDING_STATUS_PARTIALLY_APPROVED = 3;           // Partially approved request
  FUNDING_STATUS_UNDER_REVIEW = 4;                 // Under review with voting in progress
}

// Service for managing treasury operations, including requests and fund transfers
service TreasuryManagementService {
  rpc SubmitFundingRequest (FundingSubmissionRequest) returns (FundingSubmissionResponse);
  rpc ProcessFundingApproval (FundingApprovalRequest) returns (FundingApprovalResponse);
  rpc TransferFunds (TransferFundsRequest) returns (TransferFundsResponse);
  rpc GetFundingHistory (GetFundingHistoryRequest) returns (GetFundingHistoryResponse);
  rpc UpdateDistributionPolicy (UpdateDistributionPolicyRequest) returns (UpdateDistributionPolicyResponse);
}

// Request message for creating a new funding request
message FundingSubmissionRequest {
  string purpose = 1;                              // Purpose or project justification
  uint64 requested_amount = 2;                     // Requested amount of funding
  string requester_id = 3;                         // ID of the entity making the request
}

// Response message for creating a funding request
message FundingSubmissionResponse {
  string request_id = 1;                           // ID of the newly created funding request
  bool success = 2;                                // Indicates success or failure
  string message = 3;                              // Message providing additional details
}

// Request message for approving a funding request, supporting Mycelith voting
message FundingApprovalRequest {
  string request_id = 1;                           // ID of the funding request to be approved
  string voter_id = 2;                             // ID of the entity casting the vote
  VoteChoice choice = 3;                           // Choice of the voter (YES, NO, ABSTAIN)
}

// Response message for approving a funding request
message FundingApprovalResponse {
  bool success = 1;                                // Indicates success or failure
  string message = 2;                              // Message providing additional context
}

// Request message for transferring funds from a treasury pool to a recipient
message TransferFundsRequest {
  string pool_id = 1;                              // ID of the treasury pool to transfer from
  uint64 amount = 2;                               // Amount of funds to transfer
  string recipient_address = 3;                    // Address or ID of the fund recipient
  string transfer_reason = 4;                      // Reason or purpose for the transfer
}

// Response message for a fund transfer operation
message TransferFundsResponse {
  bool success = 1;                                // Indicates if the transfer was successful
  string message = 2;                              // Message providing additional context or errors
}

// Request message to retrieve the funding history for a specific treasury pool
message GetFundingHistoryRequest {
  string pool_id = 1;                              // ID of the treasury pool for the history lookup
  uint32 limit = 2;                                // Maximum number of past funding requests to retrieve
  bool include_denied = 3;                         // Flag to include denied requests in history
}

// Response message containing the funding history of a treasury pool
message GetFundingHistoryResponse {
  string pool_id = 1;                              // ID of the treasury pool
  repeated FundingRequest funding_requests = 2;    // List of funding requests for this pool
  uint32 total_requests = 3;                       // Total number of funding requests in history
}

// Request message to update the distribution policy for a treasury pool
message UpdateDistributionPolicyRequest {
  string pool_id = 1;                              // ID of the treasury pool to update
  DistributionPolicy new_policy = 2;               // New distribution policy to set for the pool
  string updated_by = 3;                           // ID of the user or system updating the policy
}

// Response message for updating a distribution policy
message UpdateDistributionPolicyResponse {
  bool success = 1;                                // Indicates if the policy update was successful
  string message = 2;                              // Additional details about the update result
  DistributionPolicy applied_policy = 3;           // The applied policy after update
}
