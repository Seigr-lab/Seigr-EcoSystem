syntax = "proto3";

package seigr;

import "segment_metadata.proto"; // Import SegmentStatus for referencing segment integrity
import "encryption.proto";       // Import IntegrityVerificationLog from encryption.proto

// Enum for categorizing severity of detected threats
enum ThreatSeverity {
    THREAT_SEVERITY_UNDEFINED = 0;
    THREAT_SEVERITY_LOW = 1;                      // Minor issue with low impact
    THREAT_SEVERITY_MODERATE = 2;                 // Moderate impact, requires monitoring
    THREAT_SEVERITY_HIGH = 3;                     // High impact, needs immediate attention
    THREAT_SEVERITY_CRITICAL = 4;                 // Critical impact, immediate action required
}

// Message to aggregate results of a monitoring cycle for multiple segments
message MonitoringCycleResult {
    string cycle_id = 1;                          // Unique identifier for the monitoring cycle
    repeated SegmentStatus segments_status = 2;   // Status of each segment in this cycle
    string completed_at = 3;                      // Timestamp when the cycle completed
    int32 total_threats_detected = 4;             // Aggregate count of threats detected in this cycle
    int32 new_threats_detected = 5;               // Number of new threats detected in this cycle
    map<string, string> additional_info = 6;      // Custom metadata for extensibility
    string cycle_duration = 7;                    // Duration of the monitoring cycle
    string initiated_by = 8;                      // ID of the system or user that initiated the cycle
    repeated ThreatSeverity threat_severities = 9; // Summary of severity levels detected
    string resolution_status = 10;                // Status of the cycle's resolution (e.g., "resolved", "pending")
    map<string, int32> threat_summary = 11;       // Summary by threat type (e.g., {"integrity": 5, "network": 3})
    string next_cycle_scheduled = 12;             // Scheduled time for the next monitoring cycle
    repeated string impacted_components = 13;     // List of components impacted during this cycle
}

// Message for threat analysis based on detected issues during monitoring
message ThreatAnalysisReport {
    string report_id = 1;                         // Unique ID for the threat analysis report
    repeated IntegrityVerificationLog threat_logs = 2; // List of logs with detected threats
    int32 total_critical_threats = 3;             // Total number of critical threats detected
    int32 total_high_threats = 4;                 // Total number of high-level threats
    int32 total_moderate_threats = 5;             // Count of moderate-level threats
    int32 total_low_threats = 6;                  // Count of low-level threats
    string analysis_timestamp = 7;                // Timestamp when the analysis was completed
    map<string, string> recommended_actions = 8;  // Recommended actions based on threat level
    map<string, string> metadata = 9;             // Additional metadata for report details
    map<string, int32> action_priority = 10;      // Priority of each recommended action for prompt handling
    string report_author = 11;                    // ID of the user or system that generated the report
    string report_duration = 12;                  // Duration taken to generate the report
    map<string, int32> threat_recurrence = 13;    // Historical recurrence of threats by severity
    repeated string escalation_path = 14;         // Suggested escalation contacts or systems
    repeated string unresolved_threats = 15;      // IDs of unresolved threats for follow-up
    map<string, string> adaptive_response = 16;   // Suggested adaptive responses based on threat patterns
    string next_analysis_scheduled = 17;          // Next scheduled threat analysis date
    map<string, int32> component_threat_counts = 18; // Threat counts per affected component
}
