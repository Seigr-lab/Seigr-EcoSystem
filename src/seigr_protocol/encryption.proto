syntax = "proto3";

package seigr;

import "hashing.proto"; // Importing hashing.proto for shared definitions

// Enum for specifying encryption types, with unique prefix
enum EncryptionType {
    ENCRYPTION_TYPE_UNDEFINED = 0;
    ENCRYPTION_TYPE_SYMMETRIC = 1;
    ENCRYPTION_TYPE_ASYMMETRIC = 2;
    ENCRYPTION_TYPE_HYBRID = 3;               // Hybrid encryption combining symmetric and asymmetric
}

// Enum to define types of cryptographic operations
enum CryptographicOperationType {
    OPERATION_TYPE_UNDEFINED = 0;
    OPERATION_TYPE_ENCRYPTION = 1;
    OPERATION_TYPE_DECRYPTION = 2;
    OPERATION_TYPE_SIGNING = 3;
    OPERATION_TYPE_VERIFICATION = 4;
}

// Message for symmetric encryption operations
message SymmetricKey {
    string key_id = 1;                         // Unique ID for the symmetric key
    bytes key = 2;                             // Symmetric encryption key (e.g., AES key)
    bytes salt = 3;                            // Salt for key derivation, if generated from a password
    string algorithm = 4;                      // Encryption algorithm used (e.g., "AES-256-GCM")
    string creation_timestamp = 5;             // Timestamp of key generation
    string expiration_timestamp = 6;           // Optional expiration for the symmetric key
}

// Message for asymmetric encryption operations (e.g., RSA)
message AsymmetricKeyPair {
    string key_pair_id = 1;                    // Unique ID for the key pair
    bytes public_key = 2;                      // Public key in PEM format
    bytes private_key = 3;                     // Private key in PEM format, if stored
    string algorithm = 4;                      // Asymmetric encryption algorithm (e.g., "RSA-2048")
    string creation_timestamp = 5;             // Timestamp of key pair generation
    string expiration_timestamp = 6;           // Optional expiration for the key pair
}

// Message for hybrid encryption keys
message HybridEncryptionKey {
    string key_id = 1;                         // Unique ID for the hybrid encryption key
    SymmetricKey symmetric_key = 2;            // Symmetric key component
    AsymmetricKeyPair asymmetric_keys = 3;     // Asymmetric key pair component
    string creation_timestamp = 4;             // Timestamp of key generation
}

// Message to store encrypted data with metadata
message EncryptedData {
    bytes ciphertext = 1;                      // Encrypted data content
    bytes iv = 2;                              // Initialization vector for encryption
    EncryptionType encryption_type = 3;        // Type of encryption used (SYMMETRIC, ASYMMETRIC, or HYBRID)
    string key_id = 4;                         // ID of the key used for encryption
    map<string, string> metadata = 5;          // Additional metadata (e.g., timestamp, encoding details)
    string encryption_timestamp = 6;           // Timestamp of encryption operation
}

// Message to log a signature for data integrity verification
message SignatureLog {
    string log_id = 1;                         // Unique ID for this log entry
    string signer_id = 2;                      // ID of the user or system signing the data
    bytes signature = 3;                       // Digital signature generated by the signer
    string signing_algorithm = 4;              // Algorithm used for signing (e.g., RSA with SHA256)
    string signed_data_hash = 5;               // Hash of the signed data for traceability
    string timestamp = 6;                      // Timestamp when the data was signed
    map<string, string> metadata = 7;          // Metadata for extensibility, such as device info
}

// Message for integrity verification logs, referencing hashing.proto's VerificationStatus
message IntegrityVerificationLog {
    string verification_id = 1;                // Unique ID for this verification entry
    string segment_id = 2;                     // ID of the segment being verified
    HashAlgorithm hash_algorithm = 3;          // Hashing algorithm used for verification
    VerificationStatus verified_status = 4;    // Verification status (e.g., VERIFIED, COMPROMISED)
    string verification_timestamp = 5;         // Timestamp of the verification process
    string verification_depth = 6;             // Depth of verification for hierarchical checks
    string error_message = 7;                  // Message if verification fails
    map<string, string> metadata = 8;          // Additional metadata for logging details
}

// Message to encapsulate operations on cryptographic keys and integrity
message CryptographicOperation {
    string operation_id = 1;                   // Unique ID for tracking cryptographic operations
    EncryptionType encryption_type = 2;        // Type of encryption used (SYMMETRIC, ASYMMETRIC, HYBRID)
    CryptographicOperationType operation_type = 3; // Type of operation (encryption, decryption, etc.)
    bytes input_data = 4;                      // Data input to the cryptographic operation
    bytes result_data = 5;                     // Result of the cryptographic operation
    string key_id = 6;                         // ID of the key used for the operation
    string operation_timestamp = 7;            // Timestamp of when the operation was performed
    map<string, string> metadata = 8;          // Additional metadata for flexibility and logging
}

// Reuse of HashData and HashAlgorithm from hashing.proto for consistency
message EncryptedHashData {
    HashData hash_info = 1;                    // Reuses HashData message for hash details
    EncryptionType encryption_type = 2;        // Type of encryption applied to this data
    map<string, string> additional_metadata = 3; // Additional metadata for flexibility
}
