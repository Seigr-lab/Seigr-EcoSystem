syntax = "proto3";

package seigr;

import "hashing.proto"; // Import for shared hash-related definitions

// Enum for specifying types of encryption
enum EncryptionType {
    ENCRYPTION_TYPE_UNDEFINED = 0;
    ENCRYPTION_TYPE_SYMMETRIC = 1;
    ENCRYPTION_TYPE_ASYMMETRIC = 2;
    ENCRYPTION_TYPE_HYBRID = 3;               // Combines symmetric and asymmetric encryption
}

// Enum for cryptographic operations
enum CryptographicOperationType {
    OPERATION_TYPE_UNDEFINED = 0;
    OPERATION_TYPE_ENCRYPTION = 1;
    OPERATION_TYPE_DECRYPTION = 2;
    OPERATION_TYPE_SIGNING = 3;
    OPERATION_TYPE_VERIFICATION = 4;
    OPERATION_TYPE_KEY_ROTATION = 5;          // Rotation of encryption keys
}

// Message for managing symmetric encryption keys
message SymmetricKey {
    string key_id = 1;                         // Unique key ID
    bytes key = 2;                             // Symmetric key bytes
    bytes salt = 3;                            // Salt for key derivation
    string algorithm = 4;                      // Algorithm used (e.g., "AES-256-GCM")
    string creation_timestamp = 5;             // Key creation time
    string expiration_timestamp = 6;           // Optional key expiration time
    string lifecycle_status = 7;               // Key lifecycle status (e.g., "active", "expired", "revoked")
    string rotation_frequency = 8;             // Frequency of key rotation (e.g., "monthly", "quarterly")
    string key_source = 9;                     // Source of the key (e.g., "HSM", "software")
    string custodian = 10;                     // Responsible custodian for the key
    map<string, string> metadata = 11;         // Metadata for key context (e.g., "usage", "policy")
    string compliance_requirements = 12;       // Compliance standards (e.g., "GDPR", "HIPAA")
}

// Message for managing asymmetric key pairs (e.g., RSA)
message AsymmetricKeyPair {
    string key_pair_id = 1;                    // Unique ID for the key pair
    bytes public_key = 2;                      // Public key bytes in PEM format
    bytes private_key = 3;                     // Private key bytes in PEM format, if stored
    string algorithm = 4;                      // Algorithm used (e.g., "RSA-2048")
    string creation_timestamp = 5;             // Key pair creation time
    string expiration_timestamp = 6;           // Optional key expiration time
    string lifecycle_status = 7;               // Lifecycle status (e.g., "active", "revoked")
    string rotation_policy = 8;                // Rotation policy or schedule
    map<string, string> metadata = 9;          // Additional context or usage policies
    string compliance_requirements = 10;       // Compliance standards (e.g., "FIPS")
}

// Message for hybrid encryption keys
message HybridEncryptionKey {
    string key_id = 1;                         // Unique ID for the hybrid encryption key
    SymmetricKey symmetric_key = 2;            // Symmetric component of the hybrid key
    AsymmetricKeyPair asymmetric_keys = 3;     // Asymmetric component of the hybrid key
    string creation_timestamp = 4;             // Key generation time
    map<string, string> metadata = 5;          // Metadata for hybrid key management
    string compliance_requirements = 6;        // Compliance standards for the hybrid key
}

// Message for storing encrypted data with metadata
message EncryptedData {
    bytes ciphertext = 1;                      // Encrypted content
    bytes iv = 2;                              // Initialization vector
    EncryptionType encryption_type = 3;        // Type of encryption used
    string key_id = 4;                         // Key ID used for encryption
    map<string, string> metadata = 5;          // Metadata (e.g., "encoding", "timestamp")
    string encryption_timestamp = 6;           // Timestamp of encryption
    string encryption_policy_id = 7;           // Encryption policy applied
}

// Message for logging signatures to verify data integrity
message SignatureLog {
    string log_id = 1;                         // Unique ID for the log entry
    string signer_id = 2;                      // User or system ID of the signer
    bytes signature = 3;                       // Digital signature
    string signing_algorithm = 4;              // Algorithm used for signing (e.g., "RSA-SHA256")
    string signed_data_hash = 5;               // Hash of signed data
    string timestamp = 6;                      // Signing timestamp
    string key_provenance = 7;                 // Provenance or origin of the key (e.g., "hardware_key")
    map<string, string> metadata = 8;          // Metadata for extensibility, such as device info
    string compliance_note = 9;                // Note for regulatory or compliance purposes
}

// Log for integrity verification, supporting hierarchical checks and error handling
message IntegrityVerificationLog {
    string verification_id = 1;                // Unique verification ID
    string segment_id = 2;                     // Segment being verified
    HashAlgorithm hash_algorithm = 3;          // Hash algorithm used
    VerificationStatus verified_status = 4;    // Status (e.g., VERIFIED, COMPROMISED)
    string verification_timestamp = 5;         // Verification timestamp
    string verification_depth = 6;             // Depth level in hierarchy
    string error_message = 7;                  // Error message if verification fails
    string parent_verification_id = 8;         // ID of a parent verification entry, if nested
    int32 retry_attempts = 9;                  // Number of retries attempted for verification
    map<string, string> metadata = 10;         // Metadata for additional verification details
}

// Encapsulates cryptographic operations, including status and result tracking
message CryptographicOperation {
    string operation_id = 1;                   // Unique ID for tracking the operation
    EncryptionType encryption_type = 2;        // Type of encryption
    CryptographicOperationType operation_type = 3; // Type of operation
    bytes input_data = 4;                      // Data input
    bytes result_data = 5;                     // Result output of the operation
    string key_id = 6;                         // ID of the key used
    string operation_timestamp = 7;            // Timestamp of operation
    string operation_result_status = 8;        // Status of the operation (e.g., "success", "failure")
    string error_code = 9;                     // Error code for failed operations
    double operation_duration_seconds = 10;    // Duration of the operation in seconds
    map<string, string> metadata = 11;         // Additional context for the operation
}

// Reuse of HashData and HashAlgorithm from hashing.proto for uniform hashing operations
message EncryptedHashData {
    HashData hash_info = 1;                    // Hash details using HashData
    EncryptionType encryption_type = 2;        // Encryption type applied to the hash
    map<string, string> additional_metadata = 3; // Metadata for flexibility
}
