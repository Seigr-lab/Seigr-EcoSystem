syntax = "proto3";

package seigr;

import "common.proto";   // Import for shared message definitions
import "network.proto";  // Import for NetworkProtocol, HyphenStatus, and other enums

// Enum for defining roles within the Seigr network
enum HyphenRole {
    ROLE_UNDEFINED = 0;
    ROLE_USER_HYPHEN = 1;                  // Standard user hyphen with protocol access
    ROLE_NON_USER_HYPHEN = 2;              // Background or utility hyphens
    ROLE_MASTER = 3;                       // Primary hyphen coordinating sub-networks
    ROLE_WORKER = 4;                       // Hyphen actively participating in data processing
    ROLE_GATEWAY = 5;                      // Gateway hyphen for external network interfacing
}

// Message for managing a hyphenâ€™s detailed role, status, and protocol support in the network
message HyphenInfo {
    string hyphen_id = 1;                       // Unique identifier for the hyphen (Seigr ID)
    HyphenRole role = 2;                        // Hyphen's role in the network (e.g., USER_HYPHEN)
    NetworkProtocol primary_protocol = 3;       // Default communication protocol (e.g., IPFS)
    HyphenStatus status = 4;                    // Operational status of the hyphen
    string last_seen = 5;                       // Timestamp of the last connectivity check
    map<string, string> metadata = 6;           // Additional metadata (e.g., data center, region)
    repeated NetworkProtocol supported_protocols = 7; // List of supported protocols
    int64 current_load = 8;                     // Current load or resource usage percentage
    string last_updated = 9;                    // Last update timestamp for hyphen status
    int32 available_cpu_percent = 10;           // Available CPU percentage
    int32 available_memory_mb = 11;             // Available memory in megabytes
    int32 available_bandwidth_mbps = 12;        // Available network bandwidth in Mbps
}

// Message for monitoring connectivity status between hyphens, adaptable to future protocols
message ConnectivityStatus {
    string source_hyphen_id = 1;                // ID of the source hyphen
    string target_hyphen_id = 2;                // ID of the target hyphen
    NetworkProtocol protocol = 3;               // Protocol used in connectivity check
    HyphenStatus connection_status = 4;         // Current status of the connection
    string protocol_specific_id = 5;            // Protocol-specific identifier (e.g., IPFS peer ID)
    int32 latency_ms = 6;                       // Measured latency in milliseconds
    string timestamp = 7;                       // Timestamp of the connectivity check
    string error_message = 8;                   // Error message if connectivity fails
    map<string, string> connection_metadata = 9; // Metadata for connection details
    float packet_loss_rate = 10;                // Packet loss rate in percentage
}

// Message for tracking data synchronization events, supporting multiple protocols
message DataSyncEvent {
    string sync_id = 1;                         // Unique identifier for the sync event
    string source_hyphen_id = 2;                // ID of the source hyphen
    string target_hyphen_id = 3;                // ID of the target hyphen receiving the data
    NetworkProtocol protocol = 4;               // Protocol used for the sync (e.g., IPFS, HYPHEN)
    string data_hash = 5;                       // Data hash for integrity verification
    string sync_type = 6;                       // Type of sync (e.g., "full", "incremental")
    bool success = 7;                           // Result of the sync operation
    string timestamp = 8;                       // Timestamp of the sync event
    map<string, string> metadata = 9;           // Metadata for sync details
    int64 data_size_bytes = 10;                 // Size of the data synced, in bytes
    int32 retries = 11;                         // Number of retry attempts, if applicable
}

// Use shared messages from common.proto

// Wrapper for shared log entry for network operations
message NetworkOperationLogWrapper {
    NetworkOperationLog operation_log = 1;      // Shared log entry for network operations
}

// Wrapper for network status request using shared NetworkStatusRequest from common.proto
message NetworkStatusRequestWrapper {
    NetworkStatusRequest status_request = 1;    // Shared status request entry
}

// Wrapper for response to a network status request, using shared NetworkStatusResponse from common.proto
message NetworkStatusResponseWrapper {
    NetworkStatusResponse status_response = 1;  // Shared response entry for network status
}

// Wrapper for health summary for a network cluster, using the shared NetworkHealthSummary from common.proto
message NetworkHealthSummaryWrapper {
    NetworkHealthSummary health_summary = 1;    // Shared overall network health status summary
}

// Wrapper for summary of network performance using the shared NetworkPerformanceSummary from common.proto
message NetworkPerformanceSummaryWrapper {
    NetworkPerformanceSummary performance_summary = 1; // Shared network performance summary
}
