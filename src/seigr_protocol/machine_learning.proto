syntax = "proto3";

package seigr;

import "common.proto"; // Import for OperationalStatus and QoSLevel

// Enum for specifying the type of machine learning model
enum MLModelType {
    ML_MODEL_TYPE_UNDEFINED = 0;
    ML_MODEL_TYPE_CLASSIFICATION = 1;           // Classification model
    ML_MODEL_TYPE_REGRESSION = 2;               // Regression model
    ML_MODEL_TYPE_CLUSTERING = 3;               // Clustering model
    ML_MODEL_TYPE_RECOMMENDER = 4;              // Recommender system
    ML_MODEL_TYPE_NLP = 5;                      // Natural language processing model
    ML_MODEL_TYPE_DEEP_LEARNING = 6;            // Deep learning model (e.g., CNN, RNN)
    ML_MODEL_TYPE_ANOMALY_DETECTION = 7;        // Anomaly detection model
    ML_MODEL_TYPE_GENERATIVE = 8;               // Generative model (e.g., GAN, VAEs)
    ML_MODEL_TYPE_MULTI_MODAL = 9;              // Multi-modal model for mixed data inputs
}

// Enum for specifying the data input types, supporting multi-sensory inputs
enum DataInputType {
    DATA_INPUT_TYPE_UNDEFINED = 0;
    DATA_INPUT_TYPE_TEXT = 1;
    DATA_INPUT_TYPE_AUDIO = 2;
    DATA_INPUT_TYPE_IMAGE = 3;
    DATA_INPUT_TYPE_VIDEO = 4;
    DATA_INPUT_TYPE_SENSOR = 5;                 // Live sensor data
    DATA_INPUT_TYPE_STRUCTURED_DATA = 6;        // Tabular or structured data
}

// Enum for defining model training status
enum MLTrainingStatus {
    ML_TRAINING_STATUS_UNDEFINED = 0;
    ML_TRAINING_STATUS_IN_PROGRESS = 1;         // Training is ongoing
    ML_TRAINING_STATUS_COMPLETED = 2;           // Training is complete
    ML_TRAINING_STATUS_FAILED = 3;              // Training failed
    ML_TRAINING_STATUS_PENDING = 4;             // Training is scheduled but not started
    ML_TRAINING_STATUS_CONTINUOUS = 5;          // Continuous learning enabled
}

// Enum for representing evaluation metrics for different model types
enum MLEvaluationMetric {
    ML_EVALUATION_METRIC_UNDEFINED = 0;
    ML_EVALUATION_METRIC_ACCURACY = 1;          // Accuracy for classification
    ML_EVALUATION_METRIC_PRECISION = 2;         // Precision for classification
    ML_EVALUATION_METRIC_RECALL = 3;            // Recall for classification
    ML_EVALUATION_METRIC_F1_SCORE = 4;          // F1 score for classification
    ML_EVALUATION_METRIC_MSE = 5;               // Mean squared error for regression
    ML_EVALUATION_METRIC_MAE = 6;               // Mean absolute error for regression
    ML_EVALUATION_METRIC_AUC = 7;               // Area under curve for binary classification
    ML_EVALUATION_METRIC_RMSE = 8;              // Root mean square error for regression
    ML_EVALUATION_METRIC_SILHOUETTE = 9;        // Silhouette score for clustering
}

// Message to represent a machine learning model, including metadata and configurations
message MLModel {
    string model_id = 1;                        // Unique identifier for the model
    MLModelType model_type = 2;                 // Type of model (e.g., classification, regression)
    string version = 3;                         // Version of the model
    string created_at = 4;                      // Timestamp of model creation
    string created_by = 5;                      // ID of the creator (user or system)
    string model_format = 6;                    // Model format (e.g., ONNX, TensorFlow, PyTorch)
    map<string, string> hyperparameters = 7;    // Hyperparameters as key-value pairs
    MultiModalConfig multi_modal_config = 8;    // Configuration for multi-modal processing
    bool senary_compatible = 9;                 // Flag indicating if model supports senary processing
    map<string, string> model_metadata = 10;    // Metadata (e.g., description, data sources)
}

// Message for configuring training parameters
message TrainingConfig {
    string model_id = 1;                        // ID of the model to train
    int32 epochs = 2;                           // Number of training epochs
    int32 batch_size = 3;                       // Batch size for training
    double learning_rate = 4;                   // Learning rate for optimization
    bool use_gpu = 5;                           // Flag to indicate if GPU should be used
    string optimizer = 6;                       // Optimizer used (e.g., Adam, SGD)
    map<string, string> training_metadata = 7;  // Metadata for training process
    string training_dataset_id = 8;             // ID of the dataset used for training
    bool enable_transfer_learning = 9;          // Flag for using transfer learning
    bool adaptive_learning = 10;                // Enables dynamic learning rates based on feedback
}

// Message representing a single evaluation metric result
message EvaluationMetricResult {
    MLEvaluationMetric metric_type = 1;         // Type of evaluation metric
    double metric_value = 2;                    // Value of the evaluation metric
}

// Message representing the result of a training session, including evaluation metrics
message TrainingResult {
    string model_id = 1;                        // ID of the trained model
    MLTrainingStatus status = 2;                // Status of the training session
    repeated EvaluationMetricResult metrics = 3; // Evaluation metrics for model performance
    string completed_at = 4;                    // Timestamp of training completion
    map<string, string> result_metadata = 5;    // Additional metadata for training details
    float training_duration_seconds = 6;        // Duration of the training process
}

// Message for making predictions using a trained model
message PredictionRequest {
    string model_id = 1;                        // ID of the model used for prediction
    repeated bytes input_data = 2;              // Input data for prediction (supports multi-modal)
    bool async_request = 3;                     // Flag for asynchronous prediction requests
    map<string, string> context_data = 4;       // Additional context for the prediction
}

// Message for the result of a prediction
message PredictionResponse {
    string model_id = 1;                        // ID of the model used for prediction
    repeated string predicted_labels = 2;       // Predicted labels for classification tasks
    repeated double predicted_values = 3;       // Predicted values for regression or probabilities
    bool success = 4;                           // Indicates if prediction was successful
    string error_message = 5;                   // Error message if prediction failed
    float prediction_confidence = 6;            // Confidence score for prediction result
    string prediction_explanation = 7;          // Explanation for interpretability purposes
}

// Message for logging performance metrics and data/model drift monitoring
message ModelPerformanceLog {
    string model_id = 1;                        // ID of the model being monitored
    repeated EvaluationMetricResult metrics = 2; // Metrics for tracking model performance
    float data_drift_score = 3;                 // Score representing drift in input data
    float model_drift_score = 4;                // Score representing drift in model behavior
    repeated string drift_alerts = 5;           // Alerts generated based on drift scores
    map<string, string> performance_metadata = 6; // Additional metadata for performance tracking
    repeated string context_factors = 7;        // Contextual factors impacting model performance
}
