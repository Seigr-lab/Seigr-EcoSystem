syntax = "proto3";

package seigr;

// Enum for specifying the type of widget, determining how data will be visualized
enum WidgetType {
    WIDGET_TYPE_UNDEFINED = 0;
    WIDGET_TYPE_CHART = 1;              // Generic chart widget
    WIDGET_TYPE_TABLE = 2;              // Tabular data widget
    WIDGET_TYPE_MAP = 3;                // Map or geospatial widget
    WIDGET_TYPE_GRAPH = 4;              // Graph structure widget (e.g., lineage, network)
    WIDGET_TYPE_GAUGE = 5;              // Gauge for showing metrics
    WIDGET_TYPE_METRIC = 6;             // Single metric or KPI widget
}

// Enum for types of charts supported in visualization
enum ChartType {
    CHART_TYPE_UNDEFINED = 0;
    CHART_TYPE_LINE = 1;                // Line chart for trends
    CHART_TYPE_BAR = 2;                 // Bar chart for categorical data
    CHART_TYPE_PIE = 3;                 // Pie chart for proportions
    CHART_TYPE_SCATTER = 4;             // Scatter plot for distribution analysis
    CHART_TYPE_HEATMAP = 5;             // Heatmap for density or intensity
}

// Message for individual widget configuration settings
message WidgetConfig {
    string widget_id = 1;                // Unique identifier for the widget
    WidgetType widget_type = 2;          // Type of widget
    string title = 3;                    // Title displayed on the widget
    ChartType chart_type = 4;            // Specific type of chart (if applicable)
    string data_source = 5;              // Identifier for the data source for this widget
    int32 refresh_interval_seconds = 6;  // Auto-refresh interval for real-time data updates
    map<string, string> display_options = 7; // Additional display settings (e.g., colors, labels)
    map<string, string> widget_metadata = 8; // Metadata for tracking widget details
}

// Message for configuring dashboard layouts with multiple widgets
message DashboardLayout {
    string dashboard_id = 1;             // Unique identifier for the dashboard
    string dashboard_name = 2;           // Name of the dashboard
    repeated WidgetConfig widgets = 3;   // List of widgets within the dashboard
    map<string, int32> layout_positions = 4; // Layout configuration (e.g., grid positions)
    string created_by = 5;               // ID of the user who created the dashboard
    string created_at = 6;               // Timestamp when the dashboard was created
    map<string, string> dashboard_metadata = 7; // Metadata for additional dashboard settings
}

// Message for setting up theme preferences across visualizations
message ThemeSettings {
    string theme_id = 1;                 // Unique ID for the theme
    string theme_name = 2;               // Name of the theme (e.g., "Dark", "Light")
    string primary_color = 3;            // Primary color for the theme
    string secondary_color = 4;          // Secondary color for the theme
    string background_color = 5;         // Background color
    string font_family = 6;              // Font family for text elements
    string font_size = 7;                // Base font size
    map<string, string> additional_styles = 8; // Additional CSS-like properties
}

// Message for managing user-defined visualization configurations and preferences
message VisualizationConfig {
    string user_id = 1;                  // ID of the user this configuration applies to
    DashboardLayout default_dashboard = 2; // Default dashboard configuration for the user
    ThemeSettings theme_settings = 3;    // Theme preferences for the user's visualizations
    bool enable_real_time_updates = 4;   // Flag to enable or disable real-time updates
    map<string, string> config_metadata = 5; // Additional metadata for user configuration
}

// Message for real-time data feed to visualization widgets
message VisualizationData {
    string data_source_id = 1;           // ID of the data source or feed
    string widget_id = 2;                // ID of the widget receiving this data
    repeated DataPoint data_points = 3;  // List of data points for the widget
    string timestamp = 4;                // Timestamp of the data update
    map<string, string> data_metadata = 5; // Metadata for additional data context
}

// Basic structure for an individual data point in a widget
message DataPoint {
    string label = 1;                    // Label or timestamp for the data point
    double value = 2;                    // Numeric value for the data point
    map<string, string> attributes = 3;  // Additional attributes (e.g., category, region)
}
