syntax = "proto3";

package seigr;

import "common_requests.proto"; // Importing ReplicationPriority, ReplicationTrigger, and ReplicationStrategy

// Message to specify replication configuration options
message ReplicationConfig {
    int32 replication_factor = 1;
    int32 min_replication_factor = 2;
    int32 max_replication_factor = 3;
    bool adaptive_replication_enabled = 4;
    ReplicationStrategy default_strategy = 5;
    string config_version = 6;
    map<string, string> metadata = 7;
    int32 adaptive_scaling_threshold = 8;
    bool failover_enabled = 9;
    bool dynamic_redundancy_scaling = 10;         // Enable dynamic scaling of redundancy levels
}

// Message for monitoring replication status across hyphens
message ReplicationStatus {
    string segment_id = 1;
    int32 current_replication_count = 2;
    int32 target_replication_count = 3;
    repeated string replica_hyphen_ids = 4;
    bool replication_completed = 5;
    ReplicationPriority priority = 6;
    string last_checked = 7;
    map<string, string> metadata = 8;
    string failover_target_id = 9;
    int32 estimated_completion_time = 10;         // Estimated time to complete replication (in seconds)
    int64 replication_speed_bytes_per_sec = 11;   // Current replication speed in bytes per second
}

// Message for logging events related to replication activities
message ReplicationEventLog {
    string event_id = 1;
    string segment_id = 2;
    string action = 3;
    string initiated_by = 4;
    string timestamp = 5;
    string status = 6;
    map<string, string> details = 7;
    string failover_status = 8;
    string initiator_type = 9;                    // Type of initiator (e.g., USER, SYSTEM, SCHEDULED)
    int32 retries_attempted = 10;                 // Count of retry attempts for this event
}

// Message for managing data redundancy, setting up replica distribution and priorities
message RedundancyManager {
    int32 min_redundancy_level = 1;
    int32 max_redundancy_level = 2;
    map<string, ReplicationPriority> segment_priority = 3;
    repeated string high_priority_segments = 4;
    repeated string critical_segments = 5;
    map<string, string> redundancy_metadata = 6;
    int32 failover_timeout_seconds = 7;
    bool adaptive_redundancy = 8;                // Enable adaptive redundancy adjustments
}

// Message for handling escalation for segments that require immediate replication
message ReplicationEscalation {
    string escalation_id = 1;
    string segment_id = 2;
    ReplicationPriority priority = 3;
    string escalated_at = 4;
    string reason = 5;
    repeated string alert_recipients = 6;
    bool immediate_replication_triggered = 7;
    map<string, string> metadata = 8;
    map<string, string> alert_preferences = 9;
    string escalation_status = 10;
    string escalation_level = 11;               // Level of escalation (e.g., CRITICAL, WARNING)
    string escalation_resolution_timestamp = 12; // Timestamp for when escalation was resolved
}

// Message for a comprehensive summary of replication status across the network
message ReplicationSummary {
    string summary_id = 1;
    int32 total_segments_replicated = 2;
    int32 high_priority_replications = 3;
    int32 failed_replications = 4;
    int32 ongoing_replications = 5;
    string generated_at = 6;
    map<string, ReplicationStatus> segment_statuses = 7;
    map<string, string> summary_metadata = 8;
    float average_replication_time = 9;         // Average time taken for replications
    int64 total_data_replicated_bytes = 10;     // Total data replicated in bytes
}
