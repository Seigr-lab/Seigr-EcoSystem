syntax = "proto3";

package seigr;

// Enum for classifying types of smart contracts managed within Seigr
enum ContractType {
    CONTRACT_TYPE_UNDEFINED = 0;            // Undefined contract type
    CONTRACT_REWARD_DISTRIBUTION = 1;       // Contract governing reward distribution
    CONTRACT_RESOURCE_ALLOCATION = 2;       // Contract for allocating or scaling resources
    CONTRACT_VOTING = 3;                    // Contract for voting-based decisions or governance
    CONTRACT_CUSTOM = 4;                    // Custom or user-defined contract
}

// Enum for tracking the execution status of smart contracts
enum ContractExecutionStatus {
    EXECUTION_STATUS_UNDEFINED = 0;         // Undefined execution status
    EXECUTION_PENDING = 1;                  // Contract execution pending
    EXECUTION_ACTIVE = 2;                   // Contract is actively executing
    EXECUTION_COMPLETED = 3;                // Contract execution successfully completed
    EXECUTION_FAILED = 4;                   // Contract execution failed
    EXECUTION_CANCELLED = 5;                // Contract was cancelled before completion
}

// Enum for defining contract audit action types
enum ContractAuditAction {
    AUDIT_ACTION_UNDEFINED = 0;             // Undefined action type
    CONTRACT_INITIALIZED = 1;               // Contract initialized or created
    CONTRACT_EXECUTION_STARTED = 2;         // Execution of contract has started
    CONTRACT_EXECUTION_COMPLETED = 3;       // Contract execution completed
    CONTRACT_EXECUTION_FAILED = 4;          // Contract execution failed
    CONTRACT_CANCELLED = 5;                 // Contract was cancelled by a participant
    CONTRACT_MODIFIED = 6;                  // Contract terms or conditions were modified
}

// Message representing the configuration and terms of a smart contract
message ContractConfig {
    string contract_id = 1;                 // Unique identifier for the contract
    ContractType contract_type = 2;         // Type of contract (e.g., REWARD_DISTRIBUTION)
    string created_by = 3;                  // ID of the creator or originator of the contract
    string created_at = 4;                  // Timestamp of when the contract was created
    map<string, string> terms = 5;          // Contract terms, such as reward thresholds or resource limits
    bool requires_voting_approval = 6;      // If true, contract execution requires voting approval
    bool enforce_adaptive_conditions = 7;   // If true, contract adapts based on network conditions
    map<string, string> config_metadata = 8; // Additional metadata for contract context
    string expiration_date = 9;             // Optional expiration date for time-limited contracts
}

// Message representing conditions and criteria required to initiate or execute a contract
message ContractExecutionCriteria {
    string contract_id = 1;                 // ID of the contract with defined execution criteria
    repeated string required_roles = 2;     // Roles required to execute the contract (e.g., admin, verifier)
    map<string, string> conditions = 3;     // Conditions, such as quorum, resource availability, etc.
    int32 min_vote_count = 4;               // Minimum vote count for execution if voting is required
    bool adaptive_threshold_enabled = 5;    // Enable adaptive criteria based on network demand or load
    repeated string dependent_contract_ids = 6; // List of contracts this execution depends upon
}

// Message representing an individual contract execution instance
message ContractExecution {
    string execution_id = 1;                // Unique identifier for the contract execution instance
    string contract_id = 2;                 // ID of the contract being executed
    ContractExecutionStatus status = 3;     // Current execution status
    string initiated_by = 4;                // ID of the user or system initiating the execution
    string started_at = 5;                  // Timestamp when execution started
    string completed_at = 6;                // Timestamp when execution completed
    map<string, string> execution_metadata = 7; // Metadata for execution (e.g., gas used, errors)
    bool requires_manual_review = 8;        // Flag indicating if manual review is required before execution
    int64 gas_limit = 9;                    // Gas or resource limit for contract execution, if applicable
}

// Message representing a log of actions or events associated with contract activities
message ContractAuditLog {
    string log_id = 1;                      // Unique identifier for the audit log entry
    string contract_id = 2;                 // ID of the contract the log pertains to
    ContractAuditAction action = 3;         // Type of action being logged
    string action_by = 4;                   // ID of the entity performing the action
    string timestamp = 5;                   // Timestamp when the action took place
    map<string, string> details = 6;        // Additional details or context for the log entry
    bool compliance_flag = 7;               // Flag if this action raised any compliance issues
    string corrective_action = 8;           // Description of corrective action if compliance issue
}

// Message representing the response of a contract action, including results and status
message ContractActionResponse {
    string contract_id = 1;                 // ID of the contract being responded to
    string response_id = 2;                 // Unique identifier for the response
    bool success = 3;                       // Indicates if the action was successful
    string result_message = 4;              // Result details or error message
    ContractExecutionStatus final_status = 5; // Final execution status after the action
    map<string, string> response_metadata = 6; // Additional metadata for context
}

// Service definition for managing contract-related operations and lifecycle actions
service SmartContractService {
    rpc InitializeContract (ContractConfig) returns (ContractActionResponse); // Initialize a new contract
    rpc ExecuteContract (ContractExecution) returns (ContractActionResponse); // Execute an existing contract
    rpc ModifyContractTerms (ModifyContractRequest) returns (ContractActionResponse); // Update contract terms
    rpc CancelContract (CancelContractRequest) returns (ContractActionResponse); // Cancel a contract
    rpc RetrieveContractAuditLog (ContractAuditRequest) returns (ContractAuditResponse); // Get audit log
}

// Request message to modify terms of an existing contract
message ModifyContractRequest {
    string contract_id = 1;                 // ID of the contract to modify
    map<string, string> new_terms = 2;      // New terms or conditions to update
    string modified_by = 3;                 // ID of the user or system modifying the contract
    string modification_timestamp = 4;      // Timestamp of modification
}

// Request message to cancel an existing contract
message CancelContractRequest {
    string contract_id = 1;                 // ID of the contract to cancel
    string cancelled_by = 2;                // ID of the user or system cancelling the contract
    string cancellation_reason = 3;         // Reason for the contract cancellation
    string cancellation_timestamp = 4;      // Timestamp of cancellation
}

// Request message to retrieve audit logs for a contract
message ContractAuditRequest {
    string contract_id = 1;                 // ID of the contract to retrieve logs for
    string time_range_start = 2;            // Start of the time range for log retrieval
    string time_range_end = 3;              // End of the time range for log retrieval
    map<string, string> filters = 4;        // Optional filters (e.g., action type, compliance flag)
}

// Response message containing a collection of contract audit logs
message ContractAuditResponse {
    repeated ContractAuditLog logs = 1;     // List of audit logs for the requested contract
    string status = 2;                      // Status of log retrieval (e.g., "SUCCESS")
    string message = 3;                     // Additional information or details
}
