syntax = "proto3";

package seigr;

// Enum defining types of sensors in the Seigr network
enum SensorType {
    SENSOR_TYPE_UNDEFINED = 0;
    SENSOR_TYPE_TEMPERATURE = 1;       // Temperature sensor
    SENSOR_TYPE_HUMIDITY = 2;          // Humidity sensor
    SENSOR_TYPE_PRESSURE = 3;          // Pressure sensor
    SENSOR_TYPE_AIR_QUALITY = 4;       // Air quality sensor
    SENSOR_TYPE_MOTION = 5;            // Motion sensor for movement detection
    SENSOR_TYPE_CUSTOM = 6;            // Custom or user-defined sensor
}

// Enum for sensor data formats
enum DataFormat {
    DATA_FORMAT_UNDEFINED = 0;
    DATA_FORMAT_RAW = 1;               // Raw data from the sensor
    DATA_FORMAT_PROCESSED = 2;         // Processed data locally on the sensor
    DATA_FORMAT_ENCRYPTED = 3;         // Encrypted data before transmission
}

// Enum for various sensor statuses
enum SensorStatus {
    SENSOR_STATUS_UNDEFINED = 0;
    SENSOR_STATUS_ACTIVE = 1;          // Sensor is active and operational
    SENSOR_STATUS_INACTIVE = 2;        // Sensor is offline or inactive
    SENSOR_STATUS_MAINTENANCE = 3;     // Sensor is under maintenance
    SENSOR_STATUS_ERROR = 4;           // Sensor has encountered an error
}

// Message for registering and tracking a sensor in the Seigr network
message SensorRegistration {
    string sensor_id = 1;                  // Unique identifier for the sensor
    SensorType sensor_type = 2;            // Type of sensor (e.g., TEMPERATURE, HUMIDITY)
    string location = 3;                   // Physical or logical location of the sensor
    SensorStatus status = 4;               // Current operational status of the sensor
    DataFormat data_format = 5;            // Data format generated by the sensor
    string created_at = 6;                 // Timestamp of the sensorâ€™s registration
    string last_active = 7;                // Timestamp of the last active state
    map<string, string> metadata = 8;      // Additional metadata (e.g., manufacturer, model)
}

// Message for configuring sensor settings, including thresholds and data transmission settings
message SensorConfig {
    string sensor_id = 1;                  // ID of the sensor to configure
    int32 data_interval_seconds = 2;       // Interval in seconds for data transmission
    double threshold_min = 3;              // Minimum threshold for generating alerts
    double threshold_max = 4;              // Maximum threshold for generating alerts
    bool enable_alerts = 5;                // Enable/disable alerts for this sensor
    bool enable_data_encryption = 6;       // Enable encryption for data transmission
    map<string, string> config_metadata = 7; // Additional configuration options or notes
}

// Message representing individual sensor data points
message SensorData {
    string sensor_id = 1;                  // ID of the sensor producing the data
    string timestamp = 2;                  // Timestamp of the data reading
    double value = 3;                      // Primary data value (e.g., temperature in Celsius)
    DataFormat data_format = 4;            // Format of the data (e.g., RAW, ENCRYPTED)
    map<string, string> data_metadata = 5; // Metadata, e.g., units or data quality tags
}

// Message for logging status updates or events from sensors
message SensorStatusLog {
    string log_id = 1;                     // Unique ID for the status log entry
    string sensor_id = 2;                  // ID of the affected sensor
    SensorStatus status = 3;               // Sensor status at the time of logging
    string timestamp = 4;                  // Timestamp of the status event
    string message = 5;                    // Description or error details
    map<string, string> log_metadata = 6;  // Additional context for the log entry
}

// Message for configuring specific alert rules on sensors
message SensorAlertRule {
    string rule_id = 1;                    // Unique identifier for the alert rule
    string sensor_id = 2;                  // ID of the sensor the rule applies to
    double alert_threshold = 3;            // Threshold value triggering the alert
    SensorStatus alert_on_status = 4;      // Specific status change triggering the alert
    string alert_message = 5;              // Custom message for the alert
    bool active = 6;                       // Flag indicating if the rule is active
    map<string, string> rule_metadata = 7; // Metadata for additional rule configuration
}

// Message for an alert generated by a sensor, useful for real-time monitoring
message SensorAlert {
    string alert_id = 1;                   // Unique identifier for the alert
    string sensor_id = 2;                  // ID of the sensor generating the alert
    double value = 3;                      // Value that triggered the alert
    SensorStatus status = 4;               // Sensor status at the alert time
    string alert_message = 5;              // Detailed alert message
    string timestamp = 6;                  // Timestamp of the alert event
    map<string, string> metadata = 7;      // Additional context for the alert
}

// Message for requesting data from a sensor, with options for filtering and formatting
message SensorDataRequest {
    string request_id = 1;                 // Unique identifier for the data request
    string sensor_id = 2;                  // ID of the sensor being queried
    string start_time = 3;                 // Start time for requested data range
    string end_time = 4;                   // End time for requested data range
    bool include_metadata = 5;             // Flag to include metadata in the response
    DataFormat requested_format = 6;       // Requested format of the returned data
}

// Response message containing a batch of sensor data points based on request parameters
message SensorDataResponse {
    string request_id = 1;                 // ID matching the original data request
    repeated SensorData data_points = 2;   // List of sensor data points in response
    string status = 3;                     // Status of the data request (e.g., "SUCCESS")
    string message = 4;                    // Additional information or notes on the request
    map<string, string> response_metadata = 5; // Metadata providing context to the response
}

// Message to manage the overall configuration of sensor monitoring settings
message SensorManagementConfig {
    int32 data_collection_interval = 1;    // Default interval for collecting sensor data
    int32 max_data_storage_days = 2;       // Maximum number of days to retain raw sensor data
    bool enable_global_alerts = 3;         // Enable/disable global alerts across the sensor network
    map<string, string> global_metadata = 4; // Metadata for global configuration
}

// Message summarizing the status of the sensor network, including operational statistics and recent alerts
message SensorNetworkSummary {
    int32 total_sensors = 1;               // Total number of sensors in the network
    int32 active_sensors = 2;              // Number of currently active sensors
    int32 inactive_sensors = 3;            // Number of sensors currently inactive
    int32 sensors_with_alerts = 4;         // Number of sensors with active alerts
    string last_updated = 5;               // Timestamp of the last summary update
    map<string, int32> sensor_counts_by_type = 6; // Sensor counts grouped by type
    map<string, string> summary_metadata = 7; // Additional metadata for the summary
}
