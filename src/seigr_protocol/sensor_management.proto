syntax = "proto3";

package seigr;

import "streaming.proto"; // For streaming capabilities, like data pipelines
import "common.proto";    // For shared enums like OperationalStatus

// Enum for specifying sensor types in the network
enum SensorType {
    SENSOR_TYPE_UNDEFINED = 0;
    TEMPERATURE = 1;              // Temperature sensor
    HUMIDITY = 2;                 // Humidity sensor
    PRESSURE = 3;                 // Pressure sensor
    AIR_QUALITY = 4;              // Air quality sensor
    MOTION = 5;                   // Motion sensor for movement detection
    CUSTOM = 6;                   // Custom or user-defined sensor
}

// Enum to specify data formats for sensors
enum DataFormat {
    DATA_FORMAT_UNDEFINED = 0;
    RAW = 1;                      // Raw data from the sensor
    PROCESSED = 2;                // Data processed locally on the sensor
    ENCRYPTED = 3;                // Data encrypted before transmission
}

// Enum for specifying sensor statuses
enum SensorStatus {
    SENSOR_STATUS_UNDEFINED = 0;
    SENSOR_ACTIVE = 1;            // Sensor is active and operational
    SENSOR_INACTIVE = 2;          // Sensor is offline or inactive
    SENSOR_MAINTENANCE = 3;       // Sensor is under maintenance
    SENSOR_ERROR = 4;             // Sensor has encountered an error
}

// Message for registering and tracking a sensor in the Seigr network
message SensorRegistration {
    string sensor_id = 1;                  // Unique identifier for the sensor
    SensorType sensor_type = 2;            // Type of the sensor (e.g., TEMPERATURE, HUMIDITY)
    string location = 3;                   // Physical or logical location of the sensor
    SensorStatus status = 4;               // Current operational status of the sensor
    DataFormat data_format = 5;            // Format of data produced by this sensor
    string created_at = 6;                 // Timestamp of sensor registration
    string last_active = 7;                // Timestamp when the sensor was last active
    map<string, string> metadata = 8;      // Metadata for additional details (e.g., manufacturer)
}

// Message for configuring a sensor, including thresholds and data transmission settings
message SensorConfig {
    string sensor_id = 1;                  // ID of the sensor to configure
    int32 data_interval_seconds = 2;       // Interval in seconds for data transmission
    double threshold_min = 3;              // Minimum threshold for alerts (e.g., temperature)
    double threshold_max = 4;              // Maximum threshold for alerts
    bool enable_alerts = 5;                // Flag to enable or disable alerts for this sensor
    bool enable_data_encryption = 6;       // Flag to enable encryption for data
    map<string, string> config_metadata = 7; // Metadata for additional configuration options
}

// Message for representing sensor data points
message SensorData {
    string sensor_id = 1;                  // ID of the sensor sending the data
    string timestamp = 2;                  // Timestamp of data reading
    double value = 3;                      // Primary data value (e.g., temperature in Celsius)
    DataFormat data_format = 4;            // Format of the data
    map<string, string> data_metadata = 5; // Metadata (e.g., units of measurement)
}

// Message for logging sensor status updates, such as error codes or downtime events
message SensorStatusLog {
    string log_id = 1;                     // Unique identifier for the status log entry
    string sensor_id = 2;                  // ID of the affected sensor
    SensorStatus status = 3;               // Status at the time of logging
    string timestamp = 4;                  // Timestamp of the status event
    string message = 5;                    // Description or error details
    map<string, string> log_metadata = 6;  // Additional metadata for the log entry
}

// Message for configuring sensor alert rules
message SensorAlertRule {
    string rule_id = 1;                    // Unique identifier for the alert rule
    string sensor_id = 2;                  // ID of the sensor the rule applies to
    double alert_threshold = 3;            // Value threshold for triggering an alert
    SensorStatus alert_on_status = 4;      // Status change that triggers the alert (optional)
    string alert_message = 5;              // Custom alert message
    bool active = 6;                       // Flag indicating if the rule is active
    map<string, string> rule_metadata = 7; // Metadata for additional rule details
}

// Message for an alert generated by a sensor, used for real-time monitoring and notifications
message SensorAlert {
    string alert_id = 1;                   // Unique identifier for the alert
    string sensor_id = 2;                  // ID of the sensor generating the alert
    double value = 3;                      // Value that triggered the alert
    SensorStatus status = 4;               // Sensor status at the time of alert
    string alert_message = 5;              // Detailed alert message
    string timestamp = 6;                  // Timestamp when the alert was generated
    map<string, string> metadata = 7;      // Additional metadata for alert context
}

// Message for requesting data from a sensor, with options for filtering and formatting
message SensorDataRequest {
    string request_id = 1;                 // Unique identifier for the data request
    string sensor_id = 2;                  // ID of the sensor being queried
    string start_time = 3;                 // Start time for requested data range
    string end_time = 4;                   // End time for requested data range
    bool include_metadata = 5;             // Flag to include metadata in the response
    DataFormat requested_format = 6;       // Format in which data should be returned
}

// Message for the response to a sensor data request, containing a batch of data points
message SensorDataResponse {
    string request_id = 1;                 // ID matching the original data request
    repeated SensorData data_points = 2;   // List of sensor data points in the response
    string status = 3;                     // Status of the data request (e.g., "SUCCESS")
    string message = 4;                    // Additional information about the request outcome
    map<string, string> response_metadata = 5; // Metadata for additional context
}

// Message to manage the overall configuration of sensor monitoring
message SensorManagementConfig {
    int32 data_collection_interval = 1;    // Interval for collecting sensor data across the network
    int32 max_data_storage_days = 2;       // Maximum number of days to retain raw sensor data
    bool enable_global_alerts = 3;         // Enable or disable global alerting for sensor network
    map<string, string> global_metadata = 4; // Metadata for global settings
}

// Message for summarizing sensor network status, including statistics and recent alerts
message SensorNetworkSummary {
    int32 total_sensors = 1;               // Total number of sensors in the network
    int32 active_sensors = 2;              // Number of currently active sensors
    int32 inactive_sensors = 3;            // Number of currently inactive sensors
    int32 sensors_with_alerts = 4;         // Number of sensors with active alerts
    string last_updated = 5;               // Timestamp of the last summary update
    map<string, int32> sensor_counts_by_type = 6; // Count of sensors by type
    map<string, string> summary_metadata = 7; // Additional metadata for the summary
}
