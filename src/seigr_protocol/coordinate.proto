syntax = "proto3";

package seigr;

// Enum to define the type of relationship between Seigr files
enum CoordinateRelationType {
    RELATION_TYPE_UNDEFINED = 0;
    RELATION_TYPE_PRIMARY_PATH = 1;            // Direct path between files
    RELATION_TYPE_SECONDARY_PATH = 2;          // Backup path
    RELATION_TYPE_HIERARCHICAL_LAYER = 3;      // Layered structure for organization
    RELATION_TYPE_CLUSTER_CONNECTION = 4;      // Connection within a cluster
    RELATION_TYPE_PEER_LINK = 5;               // Peer-to-peer link
    RELATION_TYPE_CROSS_CLUSTER_LINK = 6;      // Link across different clusters
    RELATION_TYPE_BACKUP_LINK = 7;             // Designated backup link
}

// Enum marking the status or state of a coordinate
enum CoordinateFlag {
    COORDINATE_FLAG_UNDEFINED = 0;
    COORDINATE_FLAG_ACTIVE = 1;
    COORDINATE_FLAG_INACTIVE = 2;
    COORDINATE_FLAG_ARCHIVED = 3;
    COORDINATE_FLAG_TEMPORARY = 4;
    COORDINATE_FLAG_LOCKED = 5;               // Coordinate is locked
    COORDINATE_FLAG_PRIORITY = 6;             // High-priority coordinate
    COORDINATE_FLAG_SYNC_REQUIRED = 7;        // Requires synchronization with peers
}

// Enum for defining specific layers within multidimensional structures
enum LayerType {
    LAYER_TYPE_UNDEFINED = 0;
    LAYER_TYPE_TEMPORAL = 1;                  // Time-based layer
    LAYER_TYPE_SPATIAL = 2;                   // Spatial/location-based layer
    LAYER_TYPE_LOGICAL = 3;                   // Logical or abstract layer
    LAYER_TYPE_SECURITY = 4;                  // Security layer
    LAYER_TYPE_NETWORK_TOPOLOGY = 5;          // Network topology-based layer
}

// Message representing a coordinate or position within the Seigr network
message CoordinateIndex {
    CoordinateRelationType relation_type = 1;    // Type of connection (e.g., primary, secondary)

    string layer_id = 2;                         // ID of the layer
    LayerType layer_type = 3;                    // Type of the layer (e.g., temporal, spatial)
    string hyphen_id = 4;                        // Unique ID for the hyphen
    string branch_id = 5;                        // ID for branch paths from the hyphen
    int32 depth_level = 6;                       // Level or depth in hierarchy

    // List of connected hyphens for the current coordinate
    repeated string connected_hyphens = 7;       // List of connected hyphen IDs
    float path_weight = 8;                       // Weight for path prioritization

    string parent_hyphen = 9;                    // Optional parent hyphen
    repeated CoordinateFlag flags = 10;          // State flags for the coordinate

    string version = 11;                         // Coordinate format version
    string last_modified = 12;                   // Last modification timestamp
    map<string, string> metadata = 13;           // Additional metadata
    string geographic_location = 14;             // Optional geographic data (e.g., GPS coordinates)
}

// Message for tracking relationships and paths between coordinates
message CoordinatePath {
    string start_hyphen = 1;                       // Starting hyphen
    string end_hyphen = 2;                         // End hyphen
    repeated string intermediate_hyphens = 3;      // Intermediate hyphens
    float total_weight = 4;                        // Total weight for path
    CoordinateRelationType path_type = 5;          // Type of relationship for the path
    map<string, string> metadata = 6;              // Metadata for path context
    string direction = 7;                          // Optional path directionality (e.g., "one-way", "bidirectional")
    string time_constraint = 8;                    // Optional time constraint for path validity
}
